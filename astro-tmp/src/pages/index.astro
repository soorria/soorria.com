---
import Container from '~/lib/ui/container.astro'
import Hero from '~/lib/ui/landing/Hero'
import Subtitle from '~/lib/ui/landing/Subtitle'
import MainLayout from '~/lib/ui/main-layout.astro'

import { getSingletonTextSafe, getSingletonJsonSafe } from '~/lib/supabase'
import { randomArray } from '~/lib/utils/random'
import { getRandomSkillIndexes } from '~/lib/skills/definitions'
import Skills from '~/lib/ui/landing/Skills'
import Contact from '~/lib/ui/landing/Contact'
import PageRenderedAt from '~/lib/utils/page-rendered-at.astro'

export const prerender = false

const getSubtitleOptions = async () => {
  const subtitleText = (await getSingletonTextSafe('subtitle')) ?? ''
  const subtitleChunks = subtitleText
    .split('---')
    .map((chunk) => chunk.trim().replace(/\.$/, ''))
    .filter(Boolean)
  return subtitleChunks
}

const getNow = async () => {
  const nowText = await getSingletonTextSafe('now')
  return nowText || null
}

const subtitleOptionsPromise = getSubtitleOptions()

const nowPromise = getNow()

const indexOptionsPromise = getSingletonJsonSafe<{ heroText: string; pattern?: string }>(
  'index-options',
)

// const projectsPromise: Promise<ProjectFrontMatter[]> = Promise.all(
//   featuredProjects.map(async projectSlug => {
//     const frontmatter = await getFileFrontMatter<ProjectFrontMatter>('projects', projectSlug)
//     delete frontmatter.readingTime
//     return frontmatter
//   })
// )

const randoms = randomArray(0, 100, 5)

const skillIndexes = getRandomSkillIndexes(8)

const [
  subtitleOptions,
  now,
  // projects,
  { heroText, pattern },
] = await Promise.all([
  subtitleOptionsPromise,
  nowPromise,
  // projectsPromise,
  indexOptionsPromise,
])
---

<MainLayout>
  <Container>
    <Hero title={heroText} pattern={pattern}>
      <Fragment slot="subtitle">
        <Subtitle
          client:idle
          options={subtitleOptions.map(
            (code, i) =>
              code,
              // <MdxRenderer key={i} code={code} hasCodeBlocks={false} />
          )}
        />
      </Fragment>

      {
        now ? (
          <div class="text-lg text-pretty" id="now">
            {now}
            {/* <MdxRenderer code={now} hasCodeBlocks={false} /> */}
          </div>
        ) : null
      }
    </Hero>
    <!-- <FeaturedProjects random={randoms[0]} projects={projects} /> -->
    <Skills client:visible random={randoms[1]} skillIndexes={skillIndexes} />
    <Contact client:visible random={randoms[2]} />
    <div class="py-10"></div>
    <PageRenderedAt />
  </Container>
</MainLayout>
